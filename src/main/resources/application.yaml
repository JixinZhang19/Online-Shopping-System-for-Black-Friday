server:
  port: 8090



spring:
  # mysql
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/skillup?serverTimezone=GMT&useUnicode=true&characterEncoding=utf8&useSSL=true
    username: root
    password: rootroot

  # Redis数据库索引（默认为0）
  redis:
    database: 0
    host: localhost
    port: 6379
    # password
    #客户端超时时间
    timeout: 5000
    pool:
      max-active: 200
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      # 连接池中的最大空闲连接
      max-idle: 8
      # 连接池中的最小空闲连接
      min-idle: 0

  #spring-session 使用
  session.store-type: none



flyway:
  baseline-on-migrate: true
  enabled: true



promotion:
  stock-strategy: optimistic #[oversell, sync, optimistic]
  topic:
    lock-stock: lock-stock
    lock-stock-group: LS-G
    revert-stock: revert-stock
    revert-stock-group: RS-G
    deduct-stock: deduct-stock
    deduct-stock-group: DS-G



order:
  dataCenter: 1
  machineNumber: 1
  topic:
    create-order: create-order-1
    create-order-group: CO-G-1
    pay-check: pay-check-1
    pay-check-group: PC-G-1
  delay-time: 60



# rocketmq配置信息
rocketmq:
  # rocketmq服务接入地址
  name-server: localhost:9876
  # Producer 配置项
  producer:
    # 生产者组名
    group: my-group
    send-message-timeout: 7000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    access-key: # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    secret-key: # Secret Key
    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
  # Consumer 配置项
  consumer:
    listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
      test-consumer-group:
        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费
/*
 * This file is generated by jOOQ.
 */
package com.skillup.infrastructure.jooq.tables;


import com.skillup.infrastructure.jooq.CommodityService;
import com.skillup.infrastructure.jooq.Indexes;
import com.skillup.infrastructure.jooq.Keys;
import com.skillup.infrastructure.jooq.tables.records.CommodityRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Commodity extends TableImpl<CommodityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>commodity-service.commodity</code>
     */
    public static final Commodity COMMODITY = new Commodity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommodityRecord> getRecordType() {
        return CommodityRecord.class;
    }

    /**
     * The column <code>commodity-service.commodity.commodity_id</code>.
     */
    public final TableField<CommodityRecord, String> COMMODITY_ID = createField(DSL.name("commodity_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>commodity-service.commodity.commodity_name</code>.
     */
    public final TableField<CommodityRecord, String> COMMODITY_NAME = createField(DSL.name("commodity_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>commodity-service.commodity.description</code>.
     */
    public final TableField<CommodityRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>commodity-service.commodity.price</code>.
     */
    public final TableField<CommodityRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>commodity-service.commodity.image_url</code>.
     */
    public final TableField<CommodityRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(64), this, "");

    private Commodity(Name alias, Table<CommodityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Commodity(Name alias, Table<CommodityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>commodity-service.commodity</code> table reference
     */
    public Commodity(String alias) {
        this(DSL.name(alias), COMMODITY);
    }

    /**
     * Create an aliased <code>commodity-service.commodity</code> table reference
     */
    public Commodity(Name alias) {
        this(alias, COMMODITY);
    }

    /**
     * Create a <code>commodity-service.commodity</code> table reference
     */
    public Commodity() {
        this(DSL.name("commodity"), null);
    }

    public <O extends Record> Commodity(Table<O> child, ForeignKey<O, CommodityRecord> key) {
        super(child, key, COMMODITY);
    }

    @Override
    public Schema getSchema() {
        return CommodityService.COMMODITY_SERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMODITY_UNI_COMMODITY_NAME);
    }

    @Override
    public UniqueKey<CommodityRecord> getPrimaryKey() {
        return Keys.KEY_COMMODITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommodityRecord>> getKeys() {
        return Arrays.<UniqueKey<CommodityRecord>>asList(Keys.KEY_COMMODITY_PRIMARY);
    }

    @Override
    public Commodity as(String alias) {
        return new Commodity(DSL.name(alias), this);
    }

    @Override
    public Commodity as(Name alias) {
        return new Commodity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Commodity rename(String name) {
        return new Commodity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Commodity rename(Name name) {
        return new Commodity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
